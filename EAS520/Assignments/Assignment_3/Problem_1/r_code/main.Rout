
R version 4.2.1 (2022-06-23) -- "Funny-Looking Kid"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin21.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> #!/usr/bin/env Rscript
> 
> # Problem1:Root-finding Numerical Experiment
> 
> library(doParallel)
Loading required package: foreach
Loading required package: iterators
Loading required package: parallel
> library(parallel)
> library(pracma)
> 
> n <- 4^9
> 
> f <- function(x) {
+     return(sin(3 * pi * cos(2 * pi * x) * sin(pi * x)))
+ }
> 
> 
> ## Normal Computation (Computing t1)
> 
> start_time <- Sys.time()
> result_1 <- foreach(i = 1:n) %do% fzero(f, i)
> t1 <- Sys.time() - start_time
> 
> 
> ## Embarrasingly Parallel Computation (Computing tp)
> 
> my_cluster <- makeCluster(detectCores(), type = "PSOCK")
> registerDoParallel(my_cluster)
> 
> 
> start_time_2 <- Sys.time()
> # result2 <- parallel::mclapply(1:n, function(x) fzero(root, x)) # nolint
> result_2 <- foreach(i = 1:n, .packages = c("pracma")) %dopar% fzero(f, i)
> tp <- Sys.time() - start_time_2
> 
> stopCluster(my_cluster)
> 
> 
> ## Printing results
> 
> speedup <- as.double(t1) / as.double(tp)
> efficiency <- (speedup / detectCores()) * 100
> 
> sprintf("t1: %f", t1)
[1] "t1: 2.360386"
> sprintf("tp: %f", tp)
[1] "tp: 1.791786"
> sprintf("Speedup: %f", speedup)
[1] "Speedup: 1.317337"
> sprintf("Average Efficiency: %f", efficiency)
[1] "Average Efficiency: 32.933415"
> 
> proc.time()
   user  system elapsed 
230.525   8.808 249.762 
