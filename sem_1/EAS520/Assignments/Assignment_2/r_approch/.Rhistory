registerDoParallel(muCluster)
start_time_2 <- Sys.time()
result = foreach(1:n2) %dopar% time_consuming_func()
tp1 <- Sys.time() - start_time_2
stopCluster(muCluster)
tp1
speedup_1 <- speedup(t1, tp1)
efficiency_1 <- efficiency(speedup_1)
sprintf("speedup: %f", speedup_1)
sprintf("efficiency: %f", efficiency_1)
library(doParallel)
library(parallel)
library(pracma)
time_consuming_func <- function(){
Sys.sleep(5)
}
start_time <- Sys.time()
result = foreach(1:8) %do% time_consuming_func()
t1 <- Sys.time() - start_time
sprintf("t1: %f sec", t1)
n <- 8
muCluster <- makeCluster(detectCores(), type = 'PSOCK')
registerDoParallel(muCluster)
start_time_2 <- Sys.time()
result = foreach(1:n) %dopar% time_consuming_func()
tp <- Sys.time() - start_time_2
stopCluster(muCluster)
sprintf("tp: %f sec", tp)
speedup <- function(t1, tp){
return(as.double(t1)/as.double(tp))
}
efficiency <- function(speedup){
return((speedup/detectCores()) * 100)
}
speedup_ <- speedup(t1, tp)
efficiency_ <- efficiency(speedup_)
sprintf("speedup: %f", speedup_)
sprintf("efficiency: %f", efficiency_)
n1 <- 8
n2 <- 54
n3 <- 400
#tp1 <- main(n1, time_consuming_func())
#tp2 <- main(n2, time_consuming_func())
tp3 <- main(n3, time_consuming_func())
print(tp3)
#speedup_1 <- speedup(t1, tp1)
#speedup_2 <- speedup(t1, tp2)
speedup_3 <- speedup(t1, tp3)
#efficiency_1 <- efficiency(speedup_1)
#efficiency_2 <- efficiency(speedup_2)
efficiency_3 <- efficiency(speedup_3)
#sprintf("for n: %d, speedup: %f, efficiency: %f", n1, speedup_1, efficiency_1)
#sprintf("for n: %d, speedup: %f, efficiency: %f", n2, speedup_2, efficiency_2)
sprintf("for n: %d, speedup: %f, efficiency: %f", n3, speedup_3, efficiency_3)
n1 <- 8
muCluster <- makeCluster(detectCores(), type = 'PSOCK')
registerDoParallel(muCluster)
start_time_2 <- Sys.time()
result = foreach(1:n1) %dopar% time_consuming_func()
tp1 <- Sys.time() - start_time_2
stopCluster(muCluster)
tp1
speedup_1 <- speedup(t1, tp1)
efficiency_1 <- efficiency(speedup_1)
sprintf("for n: %d, speedup: %f, efficiency: %f", n1, speedup_1, efficiency_1)
n2 <- 54
muCluster <- makeCluster(detectCores(), type = 'PSOCK')
registerDoParallel(muCluster)
start_time_3 <- Sys.time()
result = foreach(1:n2) %dopar% time_consuming_func()
tp2 <- Sys.time() - start_time_3
stopCluster(muCluster)
tp2
speedup_2 <- speedup(t2, tp2)
n2 <- 54
muCluster <- makeCluster(detectCores(), type = 'PSOCK')
registerDoParallel(muCluster)
start_time_3 <- Sys.time()
result = foreach(1:n2) %dopar% time_consuming_func()
tp2 <- Sys.time() - start_time_3
stopCluster(muCluster)
tp2
speedup_2 <- speedup(t1, tp2)
efficiency_2 <- efficiency(speedup_2)
sprintf("for n: %d, speedup: %f, efficiency: %f", n2, speedup_2, efficiency_2)
n3 <- 400
muCluster <- makeCluster(detectCores(), type = 'PSOCK')
registerDoParallel(muCluster)
start_time_4 <- Sys.time()
result = foreach(1:n3) %dopar% time_consuming_func()
tp3 <- Sys.time() - start_time_4
stopCluster(muCluster)
tp3
speedup_3 <- speedup(t1, tp3)
efficiency_3 <- efficiency(speedup_3)
sprintf("for n: %d, speedup: %f, efficiency: %f", n3, speedup_3, efficiency_3)
n2 <- 54
muCluster <- makeCluster(detectCores(), type = 'PSOCK')
registerDoParallel(muCluster)
start_time_3 <- Sys.time()
result = foreach(1:n2) %dopar% time_consuming_func()
tp2 <- Sys.time() - start_time_3
stopCluster(muCluster)
tp2
speedup_2 <- speedup(n2*5, tp2)
efficiency_2 <- efficiency(speedup_2)
sprintf("for n: %d, speedup: %f, efficiency: %f", n2, speedup_2, efficiency_2)
n3 <- 400
muCluster <- makeCluster(detectCores(), type = 'PSOCK')
registerDoParallel(muCluster)
start_time_4 <- Sys.time()
result = foreach(1:n3) %dopar% time_consuming_func()
tp3 <- Sys.time() - start_time_4
stopCluster(muCluster)
tp3
speedup_3 <- speedup(n3*5, tp3)
efficiency_3 <- efficiency(speedup_3)
sprintf("for n: %d, speedup: %f, efficiency: %f", n3, speedup_3, efficiency_3)
n3
tp3
n3*5
n3*5/tp3
2000/tp3
tp3
n3 <- 400
muCluster <- makeCluster(detectCores(), type = 'PSOCK')
registerDoParallel(muCluster)
start_time_4 <- Sys.time()
result = foreach(1:n3) %dopar% time_consuming_func()
n3 <- 400
muCluster <- makeCluster(detectCores(), type = 'PSOCK')
registerDoParallel(muCluster)
start_time_4 <- Sys.time()
result = foreach(1:n3) %dopar% time_consuming_func()
tp3 <- Sys.time() - start_time_4
stopCluster(muCluster)
tp3
speedup_3 <- speedup(n3*5, tp3*60)
efficiency_3 <- efficiency(speedup_3)
sprintf("for n: %d, speedup: %f, efficiency: %f", n3, speedup_3, efficiency_3)
library(ISLR)
weekly = read.csv("/Volumes/work/MTH522/data/Weekly.csv")
head(weekly)
dim(weekly)
summary(weekly)
cor(weekly[, -9])
attach(weekly)
plot(Volume)
model_glm1 = glm(Direction ~ Lag1+Lag2+Lag3+Lag4+Lag5+Volume, family = binomial, data = weekly)
head(weekly)
pairs(Weekly)
pairs(Weekly)
attach(weekly)
plot(Volume, ylab = "Shares traded (in billions)")
cor(weekly[, -9])
cor(Weekly[-9])
model_glm1 = glm(Direction ~ Lag1+Lag2+Lag3+Lag4+Lag5+Volume, family = binomial, data = weekly)
glm.full = glm(Direction ~ . - Year - Today, data = Weekly, family = "binomial")
summary(glm.full)
model_glm1 = glm(Direction ~ . - Year - Today, data = Weekly, family = "binomial")
summary(model_glm1)
library(ISLR)
weekly = read.csv("/Volumes/work/MTH522/data/Weekly.csv")
head(weekly)
head(weekly)
dim(weekly)
summary(weekly)
pairs(Weekly)
attach(weekly)
plot(Volume,)
cor(Weekly[-9])
model_glm = glm(Direction ~ . - Year - Today, data = Weekly, family = "binomial")
summary(model_glm)
model_prob = predict(model_glm,type = "response")
model_prob[1:10]
model_predict <- rep("Down",1089)
model_predict[model_prob > .5] = "Up"
table(model_predict, Direction)
mean(model_predict == Direction)
train <- (Year < 2009)
weekly.2009 <- weekly[!train, ]
dim(weekly.2009)
Direction.2009 <- Direction[!train]
model_fit = glm(Direction ~ Lag2, family = binomial, data = weekly,subset = train)
model_prob = predict(model_glm,type = "response")
model_predict <- rep("Down",1089)
model_predict[model_prob > .5] = "Up"
table(model_predict, Direction)
mean(model_predict == Direction)
Direction.2009 <- Direction[!train]
model_fit = glm(Direction ~ Lag2, family = binomial, data = weekly,subset = train)
train <- (Year < 2009)
model_fit = glm(Direction ~ Lag2, data = Weekly, subset = train, family = "binomial")
summary(glm.fit)
model_fit = glm(Direction ~ Lag2, data = Weekly, subset = train, family = "binomial")
summary(model_fit)
model_predict2 <- rep("Down",104)
model_predict2[model_prob2 > .5] <- "Up"
train <- (Year < 2009)
model_fit = glm(Direction ~ Lag2, data = Weekly, subset = train, family = "binomial")
summary(model_fit)
model_predict_2 <- rep("Down",104)
model_predict_2[model_predict_2 > .5] <- "Up"
table(model_predict_2, Direction.2009)
model_predict_2 <- predict(glm.fit, Weekly[!train, ], type = "response")
model_prob2 <- predict(model_fit, weekly.2009,type = "response")
model_predict_2 <- rep("Down",104)
model_predict_2[model_predict_2 > .5] <- "Up"
table(model_predict_2, Direction.2009)
mean(model_predict_2 == Direction.2009)
mean(model_predict_2 != Direction.2009)
train <- (Year < 2009)
model_fit = glm(Direction ~ Lag2, data = Weekly, subset = train, family = "binomial")
summary(model_fit)
model_prob_2 <- predict(model_fit, weekly.2009,type = "response")
model_predict_2 <- rep("Down",104)
model_predict_2[model_prob_2 > .5] <- "Up"
table(model_predict_2, Direction.2009)
mean(model_predict_2 == Direction.2009)
mean(model_predict_2 != Direction.2009)
mean(model_predict_2 != Direction.up)
mean(Weekly[!train, ]$Direction == "Up")
library(ISLR)
weekly = read.csv("/Volumes/work/MTH522/data/Weekly.csv")
head(weekly)
head(weekly)
dim(weekly)
summary(weekly)
pairs(Weekly)
attach(weekly)
plot(Volume,)
cor(Weekly[-9])
model_glm = glm(Direction ~ . - Year - Today, data = Weekly, family = "binomial")
summary(model_glm)
model_prob = predict(model_glm,type = "response")
model_predict <- rep("Down",1089)
model_predict[model_prob > .5] = "Up"
table(model_predict, Direction)
mean(model_predict == Direction)
train <- (Year < 2009)
model_fit = glm(Direction ~ Lag2, data = Weekly, subset = train, family = "binomial")
summary(model_fit)
model_prob_2 <- predict(model_fit, weekly.2009,type = "response")
model_predict_2 <- rep("Down",104)
model_predict_2[model_prob_2 > .5] <- "Up"
table(model_predict_2, Direction.2009)
mean(model_predict_2 == Direction.2009)
mean(model_predict_2 != Direction.2009)
model_prob_2 <- predict(model_fit, weekly.2009,type = "response")
model_predict_2 <- rep("Down",104)
model_predict_2[model_prob_2 > .5] <- "Up"
table(model_predict_2, Direction.2009)
library(ISLR)
weekly = read.csv("/Volumes/work/MTH522/data/Weekly.csv")
head(weekly)
head(weekly)
dim(weekly)
summary(weekly)
pairs(Weekly)
attach(weekly)
plot(Volume,)
cor(Weekly[-9])
model_glm = glm(Direction ~ . - Year - Today, data = Weekly, family = "binomial")
summary(model_glm)
model_prob = predict(model_glm,type = "response")
model_predict <- rep("Down",1089)
model_predict[model_prob > .5] = "Up"
table(model_predict, Direction)
mean(model_predict == Direction)
train <- (Year < 2009)
weekly.2009 <- weekly[!train, ]
model_fit = glm(Direction ~ Lag2, data = Weekly, subset = train, family = "binomial")
summary(model_fit)
model_prob_2 <- predict(model_fit, weekly.2009,type = "response")
model_predict_2 <- rep("Down", 104)
model_predict_2[model_prob_2 > .5] <- "Up"
table(model_predict_2, Direction.2009)
mean(model_predict_2 == Direction.2009)
mean(model_predict_2 != Direction.2009)
train <- (Year < 2009)
weekly.2009 <- weekly[!train, ]
Direction.2009 <- Direction[!train]
model_fit = glm(Direction ~ Lag2, data = Weekly, subset = train, family = "binomial")
summary(model_fit)
model_prob_2 <- predict(model_fit, weekly.2009, type = "response")
model_predict_2 <- rep("Down", 104)
model_predict_2[model_prob_2 > .5] <- "Up"
table(model_predict_2, Direction.2009)
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Boston")
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Boston.csv")
head(Auto)
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Boston.csv")
head(Auto)
Auto1 <- Auto
Auto1$mpg01 <- NA
mpg_median = median(Auto1$mpg)
print(mpg_median)
for(i in 1:dim(Auto1)[1]){
if (Auto1$mpg[i] > mpg_median){
Auto1$mpg01[i] = 1
}else{
Auto1$mpg01[i] = 0
}
}
summary(Auto)
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Auto.csv")
head(Auto)
summary(Auto)
Auto1 <- Auto
Auto1$mpg01 <- NA
mpg_median = median(Auto1$mpg)
print(mpg_median)
for(i in 1:dim(Auto1)[1]){
if (Auto1$mpg[i] > mpg_median){
Auto1$mpg01[i] = 1
}else{
Auto1$mpg01[i] = 0
}
}
#Auto1 <- data.frame(Auto,mpg01)
head(Auto1)
colnames(Auto1)
pairs(Auto1[,1:9], main="Scatterplot matrix which includes all of the variables in Auto2 dataset")
attach(Auto)
summary(Auto)
mpg01 <- ifelse( mpg > median(mpg), yes = 1, no = 0)
Auto <- data.frame(Auto, mpg01)
colnames(Auto1)
pairs(Auto[,1:9], main="Scatterplot matrix which includes all of the variables in Auto2 dataset")
pairs(Auto[,1:9], main="Scatterplot matrix which includes all of the variables in Auto2 dataset")
pairs(Auto)
colnames(Auto)
pairs(Auto)
pairs(Auto[,-9])
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Auto.csv")
head(Auto)
Auto1 <- Auto
Auto1$mpg01 <- NA
mpg_median = median(Auto1$mpg)
print(mpg_median)
for(i in 1:dim(Auto1)[1]){
if (Auto1$mpg[i] > mpg_median){
Auto1$mpg01[i] = 1
}else{
Auto1$mpg01[i] = 0
}
}
#Auto1 <- data.frame(Auto,mpg01)
head(Auto1)
colnames(Auto1)
pairs(Auto1[,1:9], main="Scatterplot matrix which includes all of the variables in Auto2 dataset")
reticulate::repl_python()
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Auto.csv")
head(Auto)
Auto1 <- Auto
Auto1$mpg01 <- NA
mpg_median = median(Auto1$mpg)
print(mpg_median)
for(i in 1:dim(Auto1)[1]){
if (Auto1$mpg[i] > mpg_median){
Auto1$mpg01[i] = 1
}else{
Auto1$mpg01[i] = 0
}
}
#Auto1 <- data.frame(Auto,mpg01)
head(Auto1)
colnames(Auto1)
reticulate::repl_python()
Auto1 = Auto1[auto.horsepower != '?']
reticulate::repl_python()
Auto1 = Auto1[Auto1.horsepower != '?']
Auto1 = Auto1[Auto1$horsepower != '?']
Auto1 = Auto1[Auto1$horsepower != '?']
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Auto.csv")
head(Auto)
Auto1 <- Auto
Auto1$mpg01 <- NA
mpg_median = median(Auto1$mpg)
print(mpg_median)
for(i in 1:dim(Auto1)[1]){
if (Auto1$mpg[i] > mpg_median){
Auto1$mpg01[i] = 1
}else{
Auto1$mpg01[i] = 0
}
}
#Auto1 <- data.frame(Auto,mpg01)
head(Auto1)
colnames(Auto1)
Auto1 = Auto1[Auto1$horsepower != '?']
Auto1 = subset(Auto1,horsepower !='?')
pairs(Auto1[,1:9], main="Scatterplot matrix which includes all of the variables in Auto2 dataset")
Auto1 = subset(Auto1,horsepower !='?')
unique(auto$horsepower)
Auto1 = subset(Auto1,horsepower !='?')
unique(Auto1$horsepower)
pairs(Auto1[,1:9], main="Scatterplot matrix which includes all of the variables in Auto2 dataset")
cor(Auto[,-9])
cor(Auto1[,-9])
cor(Auto1[,-9])
cor(Auto1[,-9])
cor(Auto1[,-9])
mpg01 <- ifelse( mpg > median(mpg), yes = 1, no = 0)
Auto <- data.frame(Auto, mpg01)
colnames(Auto)
cor(Auto[,-9])
pairs(Auto)
Auto <- subset(Auto,horsepower !='?')
unique(auto$horsepower)
Auto <- subset(Auto,horsepower !='?')
unique(Auto$horsepower)
cor(Auto[,-9])
pairs(Auto)
Auto <- subset(Auto,horsepower !='?')
cor(Auto[,-9])
pairs(Auto)
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Auto.csv")
head(Auto)
Auto1 <- Auto
Auto1$mpg01 <- NA
mpg_median = median(Auto1$mpg)
print(mpg_median)
for(i in 1:dim(Auto1)[1]){
if (Auto1$mpg[i] > mpg_median){
Auto1$mpg01[i] = 1
}else{
Auto1$mpg01[i] = 0
}
}
#Auto1 <- data.frame(Auto,mpg01)
head(Auto1)
colnames(Auto1)
Auto <- subset(Auto,horsepower !='?')
Auto1 <- subset(Auto,horsepower !='?')
pairs(Auto1[,1:9], main="Scatterplot matrix which includes all of the variables in Auto2 dataset")
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Auto.csv")
head(Auto)
Auto1 <- Auto
Auto1$mpg01 <- NA
mpg_median = median(Auto1$mpg)
print(mpg_median)
for(i in 1:dim(Auto1)[1]){
if (Auto1$mpg[i] > mpg_median){
Auto1$mpg01[i] = 1
}else{
Auto1$mpg01[i] = 0
}
}
#Auto1 <- data.frame(Auto,mpg01)
head(Auto1)
colnames(Auto1)
Auto1 <- subset(Auto,horsepower !='?')
pairs(Auto1[,1:9], main="Scatterplot matrix which includes all of the variables in Auto2 dataset")
autocorr = cor(subset(Auto1,select = -c(name)))
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Auto.csv")
head(Auto)
mpg01 <- ifelse( mpg > median(mpg), yes = 1, no = 0)
Auto <- data.frame(Auto, mpg01)
Auto <- subset(Auto,horsepower !='?')
cor(Auto[,-9])
cor(Auto[,-9])
Auto <- subset(Auto,horsepower !='?')
cor(Auto[,-9])
cor(Auto[,-9])
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Auto.csv")
head(Auto)
mpg01 <- ifelse( mpg > median(mpg), yes = 1, no = 0)
Auto <- data.frame(Auto, mpg01)
colnames(Auto)
Auto <- subset(Auto,horsepower !='?')
cor(Auto[,-9])
pairs(Auto)
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Auto.csv")
head(Auto)
mpg01 <- ifelse( mpg > median(mpg), yes = 1, no = 0)
Auto <- data.frame(Auto, mpg01)
colnames(Auto)
Auto <- subset(Auto,horsepower !='?')
cor(Auto[,-9])
cor(Auto[,-9])
library(ISLR)
Auto = read.csv("/Volumes/work/MTH522/data/Auto.csv")
head(Auto)
mpg01 <- ifelse( mpg > median(mpg), yes = 1, no = 0)
Auto <- data.frame(Auto, mpg01)
colnames(Auto)
Auto <- subset(Auto,horsepower !='?')
cor(Auto[,-9])
cor(Auto[,-9])
cor(Auto[,-9])
cor(Auto[,-9])
cor(Auto[,-9])
cor(Auto[,-9])
cor(Auto[,-9])
cor(Auto[,-9])
pairs(Auto)
Auto1 <- subset(Auto,horsepower !='?')
pairs(Auto1[,1:9], main="Scatterplot matrix which includes all of the variables in Auto2 dataset")
autocorr = cor(subset(Auto1,select = -c(name)))
